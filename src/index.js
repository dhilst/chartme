// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Js_dict from "../node_modules/bs-platform/lib/es6/js_dict.js";
import * as Js_json from "../node_modules/bs-platform/lib/es6/js_json.js";
import * as Caml_array from "../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_option from "../node_modules/bs-platform/lib/es6/caml_option.js";
import * as Caml_exceptions from "../node_modules/bs-platform/lib/es6/caml_exceptions.js";

function jQuerySelectorSafe(selector) {
  var element = jQuery(selector);
  var n = element.length;
  if (n > 0) {
    return element;
  }
  
}

var ElementNotFound = Caml_exceptions.create("Index.ElementNotFound");

function windowOnLoad(param) {
  console.log("hello");
  var data = {
    labels: /* array */[],
    datasets: /* array */[{
        label: "",
        data: /* array */[]
      }]
  };
  var key = "#mychart";
  var match = jQuerySelectorSafe(key);
  var canvas;
  if (match !== undefined) {
    canvas = match;
  } else {
    throw [
          ElementNotFound,
          key
        ];
  }
  console.log(canvas);
  var graph = new Chart(canvas, {
        type: "line",
        data: data,
        options: {
          resposive: true,
          maintainAspectRatio: false
        }
      });
  fetch("/options").then((function (prim) {
            return prim.json();
          })).then((function (json) {
          var match = Js_json.classify(json);
          var tmp;
          if (typeof match === "number" || match.tag !== /* JSONObject */2) {
            tmp = /* () */0;
          } else {
            var match$1 = Js_dict.get(match[0], "label");
            if (match$1 !== undefined) {
              var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
              if (typeof match$2 === "number" || match$2.tag) {
                tmp = /* () */0;
              } else {
                Caml_array.caml_array_get(data.datasets, 0).label = match$2[0];
                graph.update();
                tmp = /* () */0;
              }
            } else {
              tmp = /* () */0;
            }
          }
          return Promise.resolve(tmp);
        }));
  var socket = io();
  socket.on("newdata", (function (newData) {
          console.log("New data", newData);
          data.labels.push("");
          Caml_array.caml_array_get(data.datasets, 0).data.push(newData);
          graph.update();
          return /* () */0;
        }));
  return /* () */0;
}

window.onload = windowOnLoad;

export {
  jQuerySelectorSafe ,
  ElementNotFound ,
  windowOnLoad ,
  
}
/*  Not a pure module */
