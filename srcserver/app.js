// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Morgan = require("morgan");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Express = require("express");
var Commander = require("commander");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var BodyParser = require("body-parser");
var CookieParser = require("cookie-parser");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var app = Curry._1(Express, /* () */0);

var match = Js_json.classify(JSON.parse(Fs.readFileSync("package.json")));

var packageVersion;

if (typeof match === "number") {
  throw [
        Caml_builtin_exceptions.failure,
        "Can't parse package.json"
      ];
} else if (match.tag === /* JSONObject */2) {
  var match$1 = Js_dict.get(match[0], "version");
  if (match$1 !== undefined) {
    var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
    if (typeof match$2 === "number") {
      throw [
            Caml_builtin_exceptions.failure,
            "Can't parse package.json"
          ];
    } else if (match$2.tag) {
      throw [
            Caml_builtin_exceptions.failure,
            "Can't parse package.json"
          ];
    } else {
      packageVersion = match$2[0];
    }
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "Can't parse package.json"
        ];
  }
} else {
  throw [
        Caml_builtin_exceptions.failure,
        "Can't parse package.json"
      ];
}

Commander.version(packageVersion).option("-l, --label <label>", "Graph label");

app.set("views", Path.join(__dirname, "views"));

app.set("view engine", "pug");

app.use(Morgan("dev"));

app.use(BodyParser.json());

app.use(BodyParser.json({
          extended: false
        }));

app.use(Curry._1(CookieParser, /* () */0));

app.use(Express.static("../public"));

app.use(Express.static("../dist"));

app.use("/javascripts", Express.static(Path.join(__dirname, "/../node_modules/jquery/dist/")));

app.use("/javascripts", Express.static(Path.join(__dirname, "/node_modules/chart.js/dist/")));

app.use("/javascripts", Express.static(Path.join(__dirname, "./node_modules/socket.io-client/dist/")));

var router = Express.Router();

router.get("/", (function (param, res, next) {
        var options = { };
        options["title"] = "Chart me!";
        res.render("index", Caml_option.some(options));
        return Curry._1(next, undefined);
      }));

router.get("/options", (function (param, res, next) {
        res.setHeader("Content-Type", "application/json");
        res.send(JSON.stringify(app.appGet("options")));
        return Curry._1(next, undefined);
      }));

app.use("/", router);

app.use((function (_req, _res, next) {
        var err = new Error("Not Found");
        err.status = 404;
        return Curry._1(next, err);
      }));

app.use((function (err, _req, res, _next) {
        res.locals.message = err.message;
        res.locals.error = err;
        var match = err.status;
        var s = match !== undefined ? match : 500;
        res.status(s);
        res.render("error", undefined);
        return /* () */0;
      }));

exports.app = app;
exports.packageVersion = packageVersion;
exports.router = router;
/* app Not a pure module */
